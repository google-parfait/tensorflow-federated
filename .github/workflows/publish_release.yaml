# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Publish

on:  # yamllint disable-line rule:truthy

  # postsubmit
  push:
  #   branches:
  #   - main
  #   paths:
  #   - 'tensorflow_federated/version.py'

  # manual
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:

  publish-release:
    name: Publish Release
    # Only if:
    # * Repository is not a fork.
    # * Branch is `main` (for workflow_dispatch trigger).
    # if: |
    #   github.repository == 'google-parfait/tensorflow-federated'
    #   && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: write  # Required to create a release.
    outputs:
      release-tag: v${{ env.latest_version }}

    steps:

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get the latest version
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        latest_version="$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/google-parfait/tensorflow-federated/releases/latest \
            | jq -r ".tag_name" \
            | sed "s/^v//")"
        echo "latest_version=${latest_version}" >> $GITHUB_ENV

  #   - name: Get the version
  #     run: |
  #       version="$(sed --quiet \
  #           "s/^__version__ = '\(.*\)'$/\1/p" \
  #           "tensorflow_federated/version.py")"
  #       echo "version=${version}" >> $GITHUB_ENV

  #   - name: Get the description
  #     run: |
  #       description='$(sed --quiet \
  #           "/^# Release ${{ env.version }}$/,/^# Release /p" \
  #           "RELEASE.md" \
  #           | head --lines=-1)'
  #       {
  #         echo "description<<EOF"
  #         echo "${description}"
  #         echo "EOF"
  #       } >> "$GITHUB_ENV"

  #   - name: Publish release
  #     if: ${{ env.latest_version != env.version }}
  #     env:
  #       GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     run: |
  #       gh api \
  #           --method POST \
  #           -H "Accept: application/vnd.github+json" \
  #           -H "X-GitHub-Api-Version: 2022-11-28" \
  #           /repos/google-parfait/tensorflow-federated/releases \
  #           -f "tag_name=v${{ env.version }}" \
  #           -f "target_commitish=${{ github.sha }}" \
  #           -f "name=TensorFlow Federated ${{ env.version }}" \
  #           -f "body=${{ env.description }}" \
  #           -F "draft=false" \
  #           -F "prerelease=false" \
  #           -F "generate_release_notes=false"

  publish-package:
    name: Publish Package
    needs: [publish-release]
    runs-on: ubuntu-latest
    timeout-minutes: 120
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.publish-release.outputs.release-tag }}

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2.1.3
      with:
        credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}
        create_credentials_file: true

    - name: Set up bazel repository cache
      uses: actions/cache@v4
      with:
        path: "~/.cache/bazel"
        key: ${{ runner.os }}-bazel-${{ hashFiles('.bazelversion', '.bazelrc', 'WORKSPACE') }}
        restore-keys: ${{ runner.os }}-bazel-

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: "pip"

    - name: Install Python dependencies
      run: |
        pip install --upgrade numpy~=1.25
        pip freeze

    - name: Build Python package
      run: |
        bazelisk run //tools/python_package:build_python_package \
            --build_tag_filters="-nokokoro,-nopresubmit,-requires-gpu-nvidia" \
            --google_credentials="${{ steps.auth.outputs.credentials_file_path }}" \
            --remote_cache="https://storage.googleapis.com/tensorflow-federated-bazel-cache/${{ github.job }}" \
            -- \
            --output_dir="~/dist"

    # - name: Test Python package
    #   run: |
    #     package="$(ls "~/dist/"*".whl" | head -n1)"
    #     bazelisk run //tools/python_package:test_python_package \
    #         --build_tag_filters="-nokokoro,-nopresubmit,-requires-gpu-nvidia" \
    #         --google_credentials="${{ steps.auth.outputs.credentials_file_path }}" \
    #         --remote_cache="https://storage.googleapis.com/tensorflow-federated-bazel-cache/${{ github.job }}" \
    #         -- \
    #         --package="${package}"

    # - name: Publish Python package
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     repository-url: https://test.pypi.org/legacy/
    #     password: ${{ secrets.TEST_PYPI_API_TOKEN }}
