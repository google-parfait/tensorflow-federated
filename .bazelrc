# TensorFlow Federated Bazel configuration.
#
# See https://docs.bazel.build/versions/master/user-manual.html#config for
# details on the various configuration options.

# Enable verbose failures for testing only.
build --verbose_failures

# Enable logging rc options.
common --announce_rc

# Enable platform-specific configs from bazelrc files.
common --enable_platform_specific_config

# Enable logging error output.
test --test_output=errors
test --test_summary=detailed

# Execute commands as local subprocesses
build --spawn_strategy=local

# Enable build optimizations.
build --compilation_mode=opt

# Enable fast C++ protocol buffers, 10x speedup over pure Python.
build --define=use_fast_cpp_protos=true

# Processor native optimizations (depends on build host capabilities).
build --copt=-march=native
build --host_copt=-march=native
build --copt=-O3

# C++ compiler options.
build --cxxopt=-std=c++17
build:linux --copt=-Wno-stringop-truncation

# gRPC on MacOS requires this define, see
# https://github.com/bazelbuild/bazel/issues/4341#issuecomment-572050759 for
# more information.
build:macos --copt=-DGRPC_BAZEL_BUILD

#
# Remote execution capabilities.
#

# Enable authentication.
build:remote --google_default_credentials=true

# Enable remote cache.
build:remote --remote_cache=grpcs://remotebuildexecution.googleapis.com

# Project configuration.
build:remote --remote_instance_name=projects/tensorflow-federated/instances/default_instance
build:remote --project_id=tensorflow-federated

#
# Required to build Tensorflow using Bazel.
#

# For projects which use TensorFlow as part of a Bazel build process, putting
# nothing in a bazelrc will default to a monolithic build. The following line
# opts in to modular op registration support by default.
build --define=framework_shared_object=true

# For workaround https://github.com/bazelbuild/bazel/issues/8772 with Bazel >= 0.29.1
build --java_toolchain=@tf_toolchains//toolchains/java:tf_java_toolchain
build --host_java_toolchain=@tf_toolchains//toolchains/java:tf_java_toolchain

build --define=use_fast_cpp_protos=true
build --define=allow_oversize_protos=true

build --spawn_strategy=standalone

build --define=grpc_no_ares=true

# See https://github.com/bazelbuild/bazel/issues/7362 for information on what
# --incompatible_remove_legacy_whole_archive flag does.
# This flag is set to true in Bazel 1.0 and newer versions. We tried to migrate
# Tensorflow to the default, however test coverage wasn't enough to catch the
# errors.
# There is ongoing work on Bazel team's side to provide support for transitive
# shared libraries. As part of migrating to transitive shared libraries, we
# hope to provide a better mechanism for control over symbol exporting, and
# then tackle this issue again.
#
# Remove this line once TF doesn't depend on Bazel wrapping all library archives
# in -whole_archive -no_whole_archive.
build --noincompatible_remove_legacy_whole_archive

# Enable XLA support by default.
build --define=with_xla_support=true

# Disable AWS/HDFS support by default
build --define=no_aws_support=true
build --define=no_hdfs_support=true

# Modular TF build options
build:dynamic_kernels --define=dynamic_loaded_kernels=true
build:dynamic_kernels --copt=-DAUTOLOAD_DYNAMIC_KERNELS

# Suppress C++ compiler warnings, otherwise build logs become 10s of MBs.
build:linux --copt=-w
build:linux --host_copt=-w
build:macos --copt=-w

# Default paths for TF_SYSTEM_LIBS
build:linux --define=PREFIX=/usr
build:linux --define=LIBDIR=$(PREFIX)/lib
build:linux --define=INCLUDEDIR=$(PREFIX)/include
build:linux --define=PROTOBUF_INCLUDE_PATH=$(PREFIX)/include
build:macos --define=PREFIX=/usr
build:macos --define=LIBDIR=$(PREFIX)/lib
build:macos --define=INCLUDEDIR=$(PREFIX)/include
build:macos --define=PROTOBUF_INCLUDE_PATH=$(PREFIX)/include

# Build TF with C++ 17 features.
build --cxxopt=-std=c++14  # DO_NOT_SUBMIT

# On linux, we dynamically link small amount of kernels
build:linux --config=dynamic_kernels

# Suppress all warning messages.
build --output_filter=DONT_MATCH_ANYTHING

# Instruction set optimizations
build:avx_linux --copt=-mavx
build:avx_linux --host_copt=-mavx

# Options to build TensorFlow 2.x.
build --define=tf_api_version=2
build --action_env=TF2_BEHAVIOR=1

# Enable remote execution capabilities.
common --experimental_repo_remote_exec

build:rbe --repo_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1
build:rbe --google_default_credentials
build:rbe --bes_backend=buildeventservice.googleapis.com
build:rbe --bes_results_url="https://source.cloud.google.com/results/invocations"
build:rbe --bes_timeout=600s
build:rbe --define=EXECUTOR=remote
build:rbe --distinct_host_configuration=false
build:rbe --flaky_test_attempts=3
build:rbe --jobs=200
build:rbe --remote_executor=grpcs://remotebuildexecution.googleapis.com
build:rbe --remote_timeout=3600
build:rbe --spawn_strategy=remote,worker,standalone,local
test:rbe --test_env=USER=anon
build:rbe --remote_download_toplevel

build:rbe_linux --config=rbe
build:rbe_linux --action_env=PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/go/bin"
build:rbe_linux --host_javabase=@bazel_toolchains//configs/ubuntu16_04_clang/1.1:jdk8
build:rbe_linux --javabase=@bazel_toolchains//configs/ubuntu16_04_clang/1.1:jdk8
build:rbe_linux --host_java_toolchain=@bazel_tools//tools/jdk:toolchain_hostjdk8
build:rbe_linux --java_toolchain=@bazel_tools//tools/jdk:toolchain_hostjdk8

# Non-rbe settings we should include because we do not run configure
build:rbe_linux --config=avx_linux
build:rbe_linux --linkopt=-lrt
build:rbe_linux --host_linkopt=-lrt
build:rbe_linux --linkopt=-lm
build:rbe_linux --host_linkopt=-lm

build:rbe_cpu_linux --config=rbe_linux
build:rbe_cpu_linux --host_crosstool_top="@ubuntu18.04-gcc7_manylinux2010-cuda11.2-cudnn8.1-tensorrt7.2_config_cuda//crosstool:toolchain"
build:rbe_cpu_linux --crosstool_top="@ubuntu18.04-gcc7_manylinux2010-cuda11.2-cudnn8.1-tensorrt7.2_config_cuda//crosstool:toolchain"
build:rbe_cpu_linux --extra_toolchains="@ubuntu18.04-gcc7_manylinux2010-cuda11.2-cudnn8.1-tensorrt7.2_config_cuda//crosstool:toolchain-linux-x86_64"
build:rbe_cpu_linux --extra_execution_platforms="@ubuntu18.04-gcc7_manylinux2010-cuda11.2-cudnn8.1-tensorrt7.2_config_platform//:platform"
build:rbe_cpu_linux --host_platform="@ubuntu18.04-gcc7_manylinux2010-cuda11.2-cudnn8.1-tensorrt7.2_config_platform//:platform"
build:rbe_cpu_linux --platforms="@ubuntu18.04-gcc7_manylinux2010-cuda11.2-cudnn8.1-tensorrt7.2_config_platform//:platform"

build:rbe_linux_py3 --config=rbe_linux
build:rbe_linux_py3 --python_path="/usr/local/bin/python3.9"
build:rbe_linux_py3 --repo_env=TF_PYTHON_CONFIG_REPO="@ubuntu18.04-gcc7_manylinux2010-cuda11.2-cudnn8.1-tensorrt7.2_config_python3.9"
