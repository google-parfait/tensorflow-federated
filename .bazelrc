# ----------------------------------------------------------------------------------------------------------------------
# BAZEL BEHAVIOR
# Applies globally to bazel and configures its behavior.
# ----------------------------------------------------------------------------------------------------------------------

# Announce all options read from the bazelrc file(s) when starting up at the beginning of each Bazel invocation.
common --announce_rc

# Disable bzlmod (until Tensorflow supports it)
common --noenable_bzlmod

# Automatically picks up host-OS-specific config lines from bazelrc files.
common --enable_platform_specific_config

# Disable visibility enforcement as Google Federated Computation Platform (FCP) code
# is not designed for external consumption.
common --nocheck_visibility

# ----------------------------------------------------------------------------------------------------------------------
# TARGET PLATFORMS
# Configurations specific to target platforms.
# ----------------------------------------------------------------------------------------------------------------------

# Configuration for Linux on AMD64 (x86_64)
build:linux_x86_64 --copt=-march=haswell
build:linux_x86_64 --host_copt=-march=haswell

# Configuration for Linux on ARM64 (aarch64)
build:linux_aarch64 --copt=-march=armv8-a
build:linux_aarch64 --host_copt=-march=armv8-a

# Configure for Linux on ARM^$ (Apple Silicon)
build:macos --macos_minimum_os=12.0
build:macos_arm64 --copt=-mcpu=apple-m1
build:macos_arm64 --host_copt=-mcpu=apple-m1

# ----------------------------------------------------------------------------------------------------------------------
# BUILD
# Affects general build behavior.
# ----------------------------------------------------------------------------------------------------------------------

# Attempt to build & test every target whose prerequisites were successfully built.
build --keep_going

# Show the output files created by builds that requested more than one target.
build --show_result=20

# Don't allow network access for build actions in the sandbox to avoid accidental dependencies on remote services.
# Developers should tag targets with `tags=["requires-network"]` to opt-out of the enforcement.
build --nosandbox_default_allow_network

# Use the most hermetic, available sandboxing strategy.
build --strategy_regexp=//.*=sandboxed

# ----------------------------------------------------------------------------------------------------------------------
# CACHE AND REMOTE
# Configures cache both remotely and locally.
# ----------------------------------------------------------------------------------------------------------------------

# Enable remote execution and other related features
common --experimental_repo_remote_exec

# Remote cache server
common --remote_cache=https://storage.googleapis.com/jbr-fed-bazel-cache/federated-compute

# Use a static value for `PATH` and does not inherit `LD_LIBRARY_PATH` to avoid cache misses.
common --incompatible_strict_action_env

# Do not upload locally executed action results to the remote cache.
# It should be flipped to `--remote_upload_local_results` on CI.
common --noremote_upload_local_results

# Increase the maximum amount of time to wait for remote execution and cache calls.
common --remote_timeout=3600

# Check the ctime of input files of an action before uploading it to a remote cache.
common --experimental_guard_against_concurrent_changes

# Process remote cache I/O in the background instead of as the part of a spawn.
common --experimental_remote_cache_async

# Fall back to standalone local execution strategy if remote execution fails.
common --remote_local_fallback

# Enable local cache garbage collection.
common --experimental_disk_cache_gc_max_size=10G

# Extend the lease for remote cache of actions during the build.
common --experimental_remote_cache_lease_extension

# Always download coverage files for tests from the remote cache, otherwise may be incomplete for cached steps.
test --experimental_fetch_all_coverage_outputs

# Configuration disabling remote cache
build:noremote_cache --noremote_accept_cached
build:noremote_cache --remote_cache=

# ----------------------------------------------------------------------------------------------------------------------
# LEGACY AND WRONG DEFAULTS
# Override dangerous or senseless default/legacy Bazel behavior.
# ----------------------------------------------------------------------------------------------------------------------

# Allow the Bazel server to check directory sources for changes.
startup --host_jvm_args=-DBAZEL_TRACK_SOURCE_DIRECTORIES=1

# Do not build legacy runfiles symlink forests for external repositories under `.runfiles/wsname/external/repo`.
build --nolegacy_external_runfiles

# Speed up all builds by not checking if external repository files have been modified.
common --noexperimental_check_external_repository_files

# ----------------------------------------------------------------------------------------------------------------------
# C/C++
# Applied to every C++ target.
# ----------------------------------------------------------------------------------------------------------------------

# Enable a hermetic C++ toolchain and disable the default detected one.
build --incompatible_enable_cc_toolchain_resolution
build --action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1

# Defaults to --std=c++0x
build --cxxopt=-std=c++17
build --host_cxxopt=-std=c++17

# Treat warnings as errors
build --per_file_copt=+^//@-Werror
build --copt="-Wno-error=unused-but-set-variable"
build --copt="-Wno-error=deprecated-declarations"

# ----------------------------------------------------------------------------------------------------------------------
# PYTHON
# Applied to every python target.
# ----------------------------------------------------------------------------------------------------------------------

# Do not automatically create `__init__.py` files in the runfiles of Python targets.
build --incompatible_default_to_explicit_init_py

# ----------------------------------------------------------------------------------------------------------------------
# PROTOBUF
# Applied to every protobuf target.
# ----------------------------------------------------------------------------------------------------------------------

# Enable fast C++ protocol buffers, 10x speedup over pure Python.
build --define=use_fast_cpp_protos=true
build --define=allow_oversize_protos=true

# ----------------------------------------------------------------------------------------------------------------------
# TENSORFLOW BASE
# Configure default TensorFlow settings and features.
# ----------------------------------------------------------------------------------------------------------------------

# Avoid building with --compilation_mode=dbg usually, since the artifacts can be very large
build --compilation_mode=opt

# Build TensorFlow 2.x.
build --define=tf_api_version=2 --action_env=TF2_BEHAVIOR=1

# Enable Tensorflow XLA support by default.
build --define=with_xla_support=true

# Prevent gRPC from depending on c-ares.
build --define=grpc_no_ares=true

# Link tensorflow statically, disable dynamic op registration.
build --define framework_shared_object=false
build --define tsl_protobuf_header_only=false

# Default behavior leads to parts of TensorFlow library stripped,
# reverting to including whole archives.
build --noincompatible_remove_legacy_whole_archive
build --features=-force_no_whole_archive
build --host_features=-force_no_whole_archive

# Disable all default platform optional features.
build --define=no_aws_support=true
build --define=no_gcp_support=true
build --define=no_hdfs_support=true
build --define=no_nccl_support=true
build --define=no_kafka_support=true
build --define=no_ignite_support=true

# Disable XNNPACK
build --define=tflite_with_xnnpack=false

# ----------------------------------------------------------------------------------------------------------------------
# MESSAGING
# Limit build logs and clarify failures.
# ----------------------------------------------------------------------------------------------------------------------

# Without this, bazel doesn't print all Java compilation errors.
build --javacopt="-verbose"

# Don't show inactionable warnings when building (not using) external deps.
build --output_filter='^//((?!(external):).)*$'

# Configure short or long logs
build --output_filter=DONT_MATCH_ANYTHING
build:verbose_logs --output_filter=

# Enable verbose failures for testing only.
test --verbose_failures

# Enable logging error output.
test --test_output=errors
test --test_summary=detailed

# ----------------------------------------------------------------------------------------------------------------------
# DEBUGGING
# Simplify debugging (doesn't affect TensorFlow binary).
# ----------------------------------------------------------------------------------------------------------------------

# Fail fast during debugging
common:debug --nokeep_going

# Keep the sandbox on failure for debugging
build:debug --sandbox_debug

# Always run tests even if they have cached results.
test:debug --nocache_test_results

# Run one test at a time.
test:debug --test_strategy=exclusive

# Stream stdout/stderr output from each test in real-time.
test:debug --test_output=streamed

# Prevent long running tests from timing out.
test:debug --test_timeout=9999

# ----------------------------------------------------------------------------------------------------------------------
# CI/CD
# Streamline CI/CD logs and write cache results.
# ----------------------------------------------------------------------------------------------------------------------

# Fail fast during CI build
common:ci --nokeep_going

# Upload locally executed action results to the remote cache.
common:ci_main --remote_upload_local_results

# Only download required dependencies on CI.
common:ci --remote_download_toplevel

# Add a timestamp to each message generated by Bazel specifying the time at which the message was displayed.
common:ci --show_timestamps

# Only show progress every 60 seconds on CI to avoid producing overly long logs.
common:ci --show_progress_rate_limit=60

# Set this flag to enable re-tries of failed tests on CI to avoid rare flaky tests.
test:ci --flaky_test_attempts=2

# Fixes builds hanging on CI that get the TCP connection closed without sending RST packets.
common:ci --grpc_keepalive_time=30s

# -------------------------------------------------------------------------------------------------
# Load any settings & overrides specific to the local system from `./local.bazelrc`.
try-import %workspace%/.local.bazelrc
